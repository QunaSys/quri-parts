name: QURI SDK Package and release

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  pre-check:
    name: üîé Check project versions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
    - uses: actions/checkout@v3
      with:
        # Necessary to get tags for correct versioning
        fetch-depth: 0

    - name: check manual versioning
      shell: bash
      run: |
        GIT_VERSION_TAG="$(git describe --tags --abbrev=0 | head -n 1)"

        # process pyproject.toml files
        for FILE in $(find . -name "pyproject.toml"); do
          PYPROJECT_VERSION="$(sed -ne 's/version = "\(.*\)"$/\1/p' "$FILE" | head -n 1)"
          if [[ ! "$PYPROJECT_VERSION" = "0.0.0" && ! "v$PYPROJECT_VERSION" = $GIT_VERSION_TAG ]]; then
            echo "Version mismatch in $FILE; #PYPROJECT_VERSION != $GIT_VERSION_TAG" 1>&2
            false
          fi
        done

        # process Cargo.toml files
        for FILE in $(find . -name "Cargo.toml"); do
          CARGO_VERSION="$(sed -ne 's/version = "\(.*\)"$/\1/p' "$FILE" | head -n 1)"
          if [[ ! "v$CARGO_VERSION" = $GIT_VERSION_TAG ]]; then
            echo "Version mismatch in $FILE; #CARGO_VERSION != $GIT_VERSION_TAG" 1>&2
            false
          fi
        done

        echo "Version check finished successfully." 1>&2

  rust-sdist-package:
    name: üî®üì¶ Rust sdist
    needs: [pre-check]
    runs-on: "ubuntu-latest"
    defaults:
      run:
        working-directory: quri-parts
    steps:
      - name: Cache Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-3.11
      - name: Cache Packages
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-local-${{ runner.os }}-3.11

      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - run: python -m pip install --upgrade pip

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - run: |
          poetry env use 3.11
          mkdir -p dist
          poetry run pip install --upgrade build
          source $VENV

          # For sdist generation, only files under `packages/rust` or `rust` are needed.
          # To prevent errors, we remove some files of `quri-parts` package.
          rm -rf README.md pyproject.toml quri_parts docs
          mv packages/rust/pyproject.toml .
          mv packages/rust/quri_parts .
          mv packages/rust/MANIFEST.in .
          rm -rf packages/algo packages/braket packages/chem packages/circuit packages/cirq packages/core packages/ionq packages/itensor packages/openfermion packages/openqasm packages/pyscf packages/qiskit packages/quantinuum packages/qulacs packages/stim packages/tket packages/qsub packages/tensornetwork
          echo 'path = "packages/rust/Cargo.toml"' >> pyproject.toml
          poetry run python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: quri-parts-packages-rust-sdist
          path: quri-parts/dist/*
          if-no-files-found: error
          overwrite: true

  test-rust-sdist-package:
    name: ‚ñ∂Ô∏èüì¶ sdist-${{matrix.system.os}}-3${{matrix.python-version}}
    needs: [rust-sdist-package, quri-parts-python-package]
    runs-on: ${{matrix.system.os}}
    strategy:
      fail-fast: false
      matrix:
        system:
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-gnu"
          - os: "macos-13"
            target: "x86_64-apple-darwin"
          - os: "macos-latest"
            target: "aarch64-apple-darwin"
          - os: "windows-latest"
            target: "x86_64-pc-windows-msvc"
        python-version: [ "9", "11", "13" ]
    defaults:
      run:
        shell: bash
        working-directory: quri-parts
    env:
      # Needed to avoid format error in Windows
      PYTHONUTF8: "1"
    steps:
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}
          
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v4
        with:
          name: quri-parts-packages-rust-sdist
          path: quri-parts/dist

      - uses: actions/download-artifact@v4
        with:
          name: quri-parts-packages-python
          path: quri-parts/dist

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: 3.${{matrix.python-version}}

      - name: Install boost
        uses: MarkusJx/install-boost@v2
        if: runner.os == 'Windows'
        id: install-boost
        with:
          boost_version: 1.73.0

      - name: Install packages
        env:
          BOOST_ROOT: ${{ runner.os == 'Windows' && steps.install-boost.outputs.BOOST_ROOT || '' }}
        shell: bash
        run: |
          pip install pytest setuptools==75.1.0
          if [[ "${{ runner.os }}" = "Linux" ]]; then
              sudo apt install -y libjpeg-dev
          fi
          for FILE in $(find dist -name '*.tar.gz'); do
            if [[ "${{ matrix.system.os }}" == "windows-latest" ]]; then
              if [[ "$FILE" = *"quri_parts_pyscf"* || "$FILE" = *"quri_parts_itensor"* ]]; then
                # We cannot run tests on native Windows, since pyscf does not support it.
                continue
              fi
            fi
            if [[ "3.${{matrix.python-version}}" = "3.9" && "$FILE" = *"quri_parts_tket"* ]]; then
              continue
            fi
            if [[ "3.${{matrix.python-version}}" = "3.9" && "$FILE" = *"quri_parts_qsub"* ]]; then
              continue
            fi
            pip install -v $FILE
          done

      - name: Run test
        shell: bash
        run: |
          if [[ "${{ matrix.system.os }}" == "windows-latest" ]]; then
            pytest packages --ignore=packages/pyscf --ignore=packages/itensor
          else
            pytest packages
          fi

  rust-wheel-package:
    name: üî®üì¶ Rust wheel (on ${{matrix.system.os}})
    needs: [pre-check]
    runs-on: ${{matrix.system.os}}
    strategy:
      fail-fast: false
      matrix:
        system:
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-gnu"
          - os: "macos-13"
            target: "x86_64-apple-darwin"
          - os: "macos-latest"
            target: "aarch64-apple-darwin"
          - os: "windows-latest"
            target: "x86_64-pc-windows-msvc"
    defaults:
      run:
        shell: bash
        working-directory: quri-parts
    env:
      # Needed to avoid format error in Windows
      PYTHONUTF8: "1"
    steps:
      - name: Cache Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-3.11
      - name: Cache Packages
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-local-${{ runner.os }}-3.11

      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: 3.11

      - run: python -m pip install --upgrade pip build

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - if: runner.os != 'Linux'
        run: |
          mkdir -p dist
          pip install -v --upgrade pip build
          for pkg in packages/*
          do
            if [[ -e "$pkg/Cargo.toml" ]]; then
              cd "$pkg"
              python -c "import sys; import platform; print('sys_platform =', sys.platform, ', platform_machine =', platform.machine())"
              python -m pip wheel --config-settings=--build-option=--py-limited-api=cp39 --no-deps -v -w ../../dist .
              cd ../..
            fi
          done
          ls dist

      - name: Build wheels
        if: runner.os == 'Linux'
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BUILD: "cp311-manylinux_i686 cp311-manylinux_x86_64"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_ALL_LINUX: "yum install -y openssl-devel"
          CIBW_BEFORE_BUILD_LINUX: "pip3 install --upgrade keyrings.alt"
          CIBW_ARCHS_LINUX: "auto"
          CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
        with:
          package-dir: quri-parts/packages/rust
          output-dir: quri-parts/dist

      - uses: actions/upload-artifact@v4
        with:
          name: quri-parts-packages-rust-whl-${{matrix.system.target}}-abi3
          path: quri-parts/dist/*
          if-no-files-found: error
          overwrite: true

  test-rust-wheel-package:
    name: ‚ñ∂Ô∏èüì¶ wheel-${{matrix.system.os}}-3${{matrix.python-version}}
    needs: [rust-wheel-package, quri-parts-python-package]
    runs-on: ${{matrix.system.os}}
    strategy:
      fail-fast: false
      matrix:
        system:
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-gnu"
          - os: "macos-13"
            target: "x86_64-apple-darwin"
          - os: "macos-latest"
            target: "aarch64-apple-darwin"
          - os: "windows-latest"
            target: "x86_64-pc-windows-msvc"
        python-version: [ "9", "10", "11", "12", "13" ]
    defaults:
      run:
        shell: bash
        working-directory: quri-parts
    env:
      # Needed to avoid format error in Windows
      PYTHONUTF8: "1"
    steps:
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}

      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v4
        with:
          name: quri-parts-packages-rust-whl-${{matrix.system.target}}-abi3
          path: quri-parts/dist

      - uses: actions/download-artifact@v4
        with:
          name: quri-parts-packages-python
          path: quri-parts/dist_py

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: 3.${{matrix.python-version}}

      - run: python --version

      - name: Install boost
        uses: MarkusJx/install-boost@v2
        if: runner.os == 'Windows' && matrix.python-version == '13'
        id: install-boost
        with:
          boost_version: 1.73.0

      - name: Install packages
        env:
          BOOST_ROOT: ${{ (runner.os == 'Windows' && matrix.python-version == '13') && steps.install-boost.outputs.BOOST_ROOT || '' }}
        shell: bash
        run: |
          pip install pytest
          if [[ "${{ runner.os }}" = "Linux" ]]; then
              sudo apt install -y libjpeg-dev
          fi
          if [[ "${{ runner.os }}" = "Linux" ]]; then
              pip install dist/quri_parts*.manylinux2014_x86_64.whl
          else
            for FILE in "$(find dist -name 'quri_parts*.whl')"; do
              pip install -v $FILE
            done
          fi
          for FILE in $(find dist_py -name '*.whl'); do
            if [[ "${{ matrix.system.os }}" == "windows-latest" ]]; then
              if [[ "$FILE" = *"quri_parts_pyscf"* || "$FILE" = *"quri_parts_itensor"* ]]; then
                # We cannot run tests on native Windows, since pyscf does not support it.
                continue
              fi
            fi
            if [[ "3.${{matrix.python-version}}" = "3.9" && "$FILE" = *"quri_parts_tket"* ]]; then
              continue
            fi
            if [[ "3.${{matrix.python-version}}" = "3.9" && "$FILE" = *"quri_parts_qsub"* ]]; then
              continue
            fi
            pip install -v $FILE
          done

      - name: Run test
        shell: bash
        run: |
          if [[ "${{ matrix.system.os }}" == "windows-latest" ]]; then
            pytest packages --ignore=packages/pyscf --ignore=packages/itensor
          else
            pytest packages
          fi

  quri-parts-python-package:
    name: üî®üì¶ QURI Parts python packages
    needs: [pre-check]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: quri-parts

    steps:
    - uses: actions/checkout@v3
      with:
        # Necessary to get tags for correct versioning
        fetch-depth: 0

    - uses: ./.github/actions/quri-parts/python-poetry-install
      with:
        poetry-version: '1.4.0'
        python-version: '3.10'

    - shell: bash
      run: |
        pip install setuptools
        poetry env use 3.10
        poetry self add setuptools
        poetry self add "poetry-dynamic-versioning[plugin]"
        mkdir -p dist
        cp -f NOTICE quri_parts/
        poetry build
        cd packages
        for pkg in *
        do
          cd $pkg
          if [[ ! -e "Cargo.toml" ]]; then
            cp -f NOTICE quri_parts/$pkg/
            poetry build
            mv dist/* ../../dist
          fi
          cd ..
        done

    - uses: actions/upload-artifact@v4
      with:
        name: quri-parts-packages-python
        path: quri-parts/dist/*
        if-no-files-found: error
        overwrite: true

  merge-quri-parts:
    name: üî®üì¶ QURI Parts
    needs: [quri-parts-python-package, test-rust-wheel-package, test-rust-sdist-package]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: quri-parts
    steps:
      - name: Merge QURI Parts Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: quri-sdk-quri-parts
          pattern: quri-parts-packages-*

  release-quri-parts:
    name: üïäÔ∏è Release QURI Parts
    needs: merge-quri-parts
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: quri-parts
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: quri-sdk-quri-parts

      - name: Install Twine
        run: python -m pip install twine==6.1.0 packaging==24.2

      - name: Release to PyPI
        run: |
          COUNTER=0
          for f in *; do
            echo "Checking $f"
            if ! python -m twine check $f; then
              COUNTER=$((COUNTER + 1))
            fi
          done
          [[ $COUNTER = 0 ]] && python -m twine upload *
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TWINE_API_TOKEN }}

  quri-algo-package:
    name: üî®üì¶ QURI Algo
    runs-on: ubuntu-latest
    needs: pre-check
    defaults:
      run:
        working-directory: quri-algo

    steps:
    - uses: actions/checkout@v3
      with:
        # Necessary to get tags for correct versioning
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - uses: ./.github/actions/quri-algo/setup

    - run: |
        poetry self add "poetry-dynamic-versioning[plugin]"

    - run: |
        poetry env use python3.11
        poetry build

    - uses: actions/upload-artifact@v4
      with:
        name: quri-sdk-quri-algo
        path: quri-algo/dist/*
        if-no-files-found: error
        overwrite: true

  release-quri-algo:
    name: üïäÔ∏è Release QURI Algo
    needs: [quri-algo-package]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: quri-algo
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: quri-sdk-quri-algo

    - name: Install Twine
      run: python -m pip install twine

    - name: Release to PyPI
      run: python -m twine upload *
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.TWINE_API_TOKEN }}

  quri-vm-package:
    name: üî®üì¶ QURI VM
    runs-on: ubuntu-latest
    needs: pre-check
    defaults:
      run:
        working-directory: quri-vm

    steps:
    - uses: actions/checkout@v3
      with:
        # Necessary to get tags for correct versioning
        fetch-depth: 0

    - uses: ./.github/actions/quri-vm/setup
      with:
        poetry-version: '1.8.0'
        python-version: '3.10'

    - run: |
        poetry self add "poetry-dynamic-versioning[plugin]"

    - run: |
        poetry env use 3.10
        poetry build

    - uses: actions/upload-artifact@v4
      with:
        name: quri-sdk-quri-vm
        path: quri-vm/dist/*
        if-no-files-found: error

  release-quri-vm:
    name: üïäÔ∏è Release QURI VM
    needs: [quri-vm-package]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: quri-vm
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: quri-sdk-quri-vm

    - name: Install Twine
      run: python -m pip install twine

    - name: Release to PyPI
      run: python -m twine upload *
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.TWINE_API_TOKEN }}

  merge-quri-sdk:
    name: üî®üì¶ QURI SDK
    needs: [merge-quri-parts, quri-algo-package, quri-vm-package]
    runs-on: ubuntu-latest
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: quri-sdk
          pattern: quri-sdk-*

  release-quri-sdk:
    name: üïäÔ∏è Release QURI SDK
    needs: merge-quri-sdk
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: quri-sdk

      - name: Install Twine
        run: python -m pip install twine==6.1.0 packaging==24.2

      - name: Release to PyPI
        run: |
          COUNTER=0
          for f in *; do
            echo "Checking $f"
            if ! python -m twine check $f; then
              COUNTER=$((COUNTER + 1))
            fi
          done
          [[ $COUNTER = 0 ]] && python -m twine upload *
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TWINE_API_TOKEN }}

