# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#      http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from abc import ABC, abstractmethod, abstractproperty
from typing import Optional, Protocol

from quri_parts.circuit import GateSequence, ImmutableQuantumCircuit, QuantumCircuit


class QuantumState(Protocol):
    """QuantumState is an interface for classes representing a quantum state.

    Since this interface is defined with Protocol, explicit inheritance
    of this class is not necessary when implementing a concrete class
    with this interface. (You *can* inherit it to indicate the interface
    if you want.)
    """

    @abstractproperty
    def qubit_count(self) -> int:
        """Returns the qubit count of the state."""
        ...


class CircuitQuantumState(QuantumState):
    r"""CircuitQuantumState is an interface for classes representing a quantum
    state generated by applying a circuit to \|00...0> state."""

    @abstractproperty
    def circuit(self) -> ImmutableQuantumCircuit:
        """Circuit to build the quantum state."""
        ...

    @abstractmethod
    def with_gates_applied(self, gates: GateSequence) -> "CircuitQuantumState":
        """Returns a new state with the gates applied.

        The original state is not changed.
        """
        ...


class CircuitQuantumStateMixin(ABC):
    def __init__(
        self, n_qubits: int, circuit: Optional[ImmutableQuantumCircuit] = None
    ) -> None:
        self._circuit: ImmutableQuantumCircuit
        if circuit is None:
            self._circuit = QuantumCircuit(n_qubits).freeze()
        else:
            if circuit.qubit_count != n_qubits:
                raise ValueError(
                    f"n_qubits={n_qubits} does not match with circuit.qubit_count="
                    f"{circuit.qubit_count}"
                )
            self._circuit = circuit.freeze()

    @property
    def circuit(self) -> ImmutableQuantumCircuit:
        """Circuit to build the quantum state."""
        return self._circuit


class GeneralCircuitQuantumState(CircuitQuantumStateMixin, CircuitQuantumState):
    r"""GeneralCircuitQuantumState represents a state given as a result of
    applying a circuit to \|00...0> state."""

    def __init__(
        self, n_qubits: int, circuit: Optional[ImmutableQuantumCircuit] = None
    ) -> None:
        self._n_qubits: int = n_qubits
        CircuitQuantumStateMixin.__init__(self, n_qubits, circuit)

    def __repr__(self) -> str:
        return "{}(n_qubits={}, circuit={})".format(
            self.__class__.__name__,
            self._n_qubits,
            self.circuit,
        )

    @property
    def qubit_count(self) -> int:
        return self._n_qubits

    def with_gates_applied(self, gates: GateSequence) -> "GeneralCircuitQuantumState":
        circuit = self.circuit + gates
        return GeneralCircuitQuantumState(self._n_qubits, circuit)
