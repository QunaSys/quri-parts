# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#      http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import numpy as np
from numpy import array

from quri_parts.chem.mol import (
    AO1eIntArray,
    AO2eIntArray,
    SpatialMO1eIntArray,
    SpatialMO2eIntArray,
    SpinMO1eIntArray,
    SpinMO2eIntArray,
)


class Test1eIntegral:
    # Hard coded full space spatial electron integrals of a spin up H3 chain

    ao_1e_int = AO1eIntArray(
        array(
            [
                [-1.24398564, -0.86080698, -0.22631877],
                [-0.86080698, -1.4924109, -0.86080698],
                [-0.22631877, -0.86080698, -1.24398564],
            ]
        )
    )

    mo_coeff = array(
        [
            [0.36752998, 0.75344304, -0.81446919],
            [0.5465483, 0.0, 1.22005563],
            [0.36752998, -0.75344304, -0.81446919],
        ]
    )

    def test_ao1eint_to_spatial_mo1eint(self) -> None:
        mo_1e_int = SpatialMO1eIntArray(
            array(
                [
                    [-1.53466912, -0.0, -0.12053411],
                    [0.0, -1.15541096, -0.0],
                    [-0.12053411, -0.0, -0.75066168],
                ]
            )
        )

        assert np.allclose(
            self.ao_1e_int.to_spatial_mo1int(mo_coeff=self.mo_coeff).array,
            mo_1e_int.array,
        )

    def test_ao1eint_to_spin_mo1eint(self) -> None:
        spin_mo_1e_int = SpinMO1eIntArray(
            array(
                [
                    [-1.53466912, 0.0, 0.0, 0.0, -0.12053411, 0.0],
                    [0.0, -1.53466912, 0.0, 0.0, 0.0, -0.12053411],
                    [0.0, 0.0, -1.15541096, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, -1.15541096, 0.0, 0.0],
                    [-0.12053411, 0.0, 0.0, 0.0, -0.75066168, 0.0],
                    [0.0, -0.12053411, 0.0, 0.0, 0.0, -0.75066168],
                ]
            )
        )

        assert np.allclose(
            self.ao_1e_int.to_mo1int(mo_coeff=self.mo_coeff).array, spin_mo_1e_int.array
        )


class Test2eIntegral:
    # Hard coded full space spatial electron integrals of a H2 chain

    ao_2e_int = AO2eIntArray(
        array(
            [
                [
                    [[0.77460594, 0.30930897], [0.30930897, 0.15786578]],
                    [[0.30930897, 0.15786578], [0.47804137, 0.30930897]],
                ],
                [
                    [[0.30930897, 0.47804137], [0.15786578, 0.30930897]],
                    [[0.15786578, 0.30930897], [0.30930897, 0.77460594]],
                ],
            ]
        )
    )

    mo_coeff = array([[0.57802798, 0.99650312], [0.57802798, -0.99650312]])

    def test_ao2eint_to_spatial_mo2eint(self) -> None:
        spatial_mo_2e_int = SpatialMO2eIntArray(
            array(
                [
                    [
                        [
                            [6.26402500e-01, 5.41231337e-17],
                            [9.02812188e-17, 1.96790583e-01],
                        ],
                        [
                            [9.02812188e-17, 1.96790583e-01],
                            [6.21706763e-01, 7.46175164e-17],
                        ],
                    ],
                    [
                        [
                            [5.41231337e-17, 6.21706763e-01],
                            [1.96790583e-01, 6.58755071e-17],
                        ],
                        [
                            [1.96790583e-01, 6.58755071e-17],
                            [7.46175164e-17, 6.53070747e-01],
                        ],
                    ],
                ]
            )
        )
        assert np.allclose(
            self.ao_2e_int.to_spatial_mo2int(mo_coeff=self.mo_coeff).array,
            spatial_mo_2e_int.array,
        )

    def test_ao2eint_to_spin_mo2eint(self) -> None:
        # This array is generated by openfermionpyscf's
        # PyscfMolecularData.get_molecular_hamiltonian().n_body_tensors,
        # It divides the spin electron integral by a factor of 2,
        # so I multiply it back to make the convention consistent with
        # quri-parts'.
        spin_mo_2e_int = SpinMO2eIntArray(
            2
            * array(
                [
                    [
                        [
                            [0.31320125, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.09839529, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.31320125, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.09839529, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.09839529, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.31085338, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.09839529, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.31085338, 0.0, 0.0, 0.0],
                        ],
                    ],
                    [
                        [
                            [0.0, 0.31320125, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.09839529],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.31320125, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.09839529],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.09839529],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.31085338, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.09839529],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.31085338, 0.0, 0.0],
                        ],
                    ],
                    [
                        [
                            [0.0, 0.0, 0.31085338, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.09839529, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.31085338, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.09839529, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.09839529, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.32653537, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.09839529, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.32653537, 0.0],
                        ],
                    ],
                    [
                        [
                            [0.0, 0.0, 0.0, 0.31085338],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.09839529, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.31085338],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.09839529, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.09839529, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.32653537],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.09839529, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.32653537],
                        ],
                    ],
                ]
            ).astype(np.complex128)
        )
        assert np.allclose(
            self.ao_2e_int.to_mo2int(mo_coeff=self.mo_coeff).array, spin_mo_2e_int.array
        )
