from typing import Mapping, Optional, Sequence, Tuple, Union

from quri_parts.circuit.circuit_parametric import (
    MutableParametricQuantumCircuitProtocol,
    ParametricQuantumCircuitProtocol,
)
from quri_parts.circuit.parameter_mapping import LinearParameterMapping

from .circuit import GateSequence, ImmutableQuantumCircuit, QuantumCircuit
from .gate import ParametricQuantumGate, QuantumGate
from .parameter import Parameter

class ImmutableParametricQuantumCircuit(ParametricQuantumCircuitProtocol):
    def __new__(
        cls, circuit: "ImmutableParametricQuantumCircuit"
    ) -> "ImmutableParametricQuantumCircuit": ...
    def __eq__(self, other: object) -> bool: ...
    @property
    def qubit_count(self) -> int: ...
    @property
    def cbit_count(self) -> int: ...
    @property
    def gates(self) -> Sequence[QuantumGate]: ...
    @property
    def _gates(
        self,
    ) -> Sequence[
        Union[tuple[QuantumGate, None], tuple[ParametricQuantumGate, Parameter]]
    ]: ...
    @property
    def gates_and_params(
        self,
    ) -> Sequence[
        Union[Tuple[QuantumGate, None], Tuple[ParametricQuantumGate, Parameter]]
    ]: ...
    @property
    def has_trivial_parameter_mapping(self) -> bool: ...
    @property
    def depth(self) -> int: ...
    @property
    def param_mapping(self) -> LinearParameterMapping: ...
    def primitive_circuit(self) -> "ImmutableParametricQuantumCircuit": ...
    def get_mutable_copy(self) -> "ParametricQuantumCircuit": ...
    def combine(
        self, gates: Union[GateSequence, "ImmutableParametricQuantumCircuit"]
    ) -> "ParametricQuantumCircuit": ...
    def freeze(self) -> "ImmutableParametricQuantumCircuit": ...
    def bind_parameters(
        self, params: Sequence[float]
    ) -> "ImmutableBoundParametricQuantumCircuit": ...
    def bind_parameters_by_dict(
        self, params_dict: dict[Parameter, float]
    ) -> "ImmutableBoundParametricQuantumCircuit": ...
    @property
    def _params(self) -> Sequence[Parameter]: ...
    @property
    def parameter_count(self) -> int: ...
    def __add__(
        self, gates: Union[GateSequence, "ParametricQuantumCircuitProtocol"]
    ) -> "ImmutableParametricQuantumCircuit": ...
    def __radd__(
        self, gates: Union[GateSequence, "ParametricQuantumCircuitProtocol"]
    ) -> "ImmutableParametricQuantumCircuit": ...

class ParametricQuantumCircuit(
    ImmutableParametricQuantumCircuit, MutableParametricQuantumCircuitProtocol
):
    def __new__(
        cls, qubit_count: int, cbit_count: int = 0
    ) -> "ParametricQuantumCircuit": ...
    def add_gate(self, gate: QuantumGate, gate_index: Optional[int] = None) -> None: ...
    def extend(
        self, gates: Union[GateSequence, "ImmutableParametricQuantumCircuit"]
    ) -> None: ...
    def __iadd__(
        self, gates: Union[GateSequence, "ParametricQuantumCircuitProtocol"]
    ) -> "ParametricQuantumCircuit": ...
    def add_ParametricRX_gate(self, qubit_index: int) -> Parameter: ...
    def add_ParametricRY_gate(self, qubit_index: int) -> Parameter: ...
    def add_ParametricRZ_gate(self, qubit_index: int) -> Parameter: ...
    def add_ParametricPauliRotation_gate(
        self, target_indices: Sequence[int], pauli_ids: Sequence[int]
    ) -> Parameter: ...
    def add_Identity_gate(self, qubit_index: int) -> None: ...
    def add_X_gate(self, qubit_index: int) -> None: ...
    def add_Y_gate(self, qubit_index: int) -> None: ...
    def add_Z_gate(self, qubit_index: int) -> None: ...
    def add_H_gate(self, qubit_index: int) -> None: ...
    def add_S_gate(self, qubit_index: int) -> None: ...
    def add_Sdag_gate(self, qubit_index: int) -> None: ...
    def add_SqrtX_gate(self, qubit_index: int) -> None: ...
    def add_SqrtXdag_gate(self, qubit_index: int) -> None: ...
    def add_SqrtY_gate(self, qubit_index: int) -> None: ...
    def add_SqrtYdag_gate(self, qubit_index: int) -> None: ...
    def add_T_gate(self, qubit_index: int) -> None: ...
    def add_Tdag_gate(self, qubit_index: int) -> None: ...
    def add_U1_gate(self, qubit_index: int, lmd: float) -> None: ...
    def add_U2_gate(self, qubit_index: int, phi: float, lmd: float) -> None: ...
    def add_U3_gate(
        self, qubit_index: int, theta: float, phi: float, lmd: float
    ) -> None: ...
    def add_RX_gate(self, qubit_index: int, angle: float) -> None: ...
    def add_RY_gate(self, qubit_index: int, angle: float) -> None: ...
    def add_RZ_gate(self, qubit_index: int, angle: float) -> None: ...
    def add_CNOT_gate(self, control_index: int, target_index: int) -> None: ...
    def add_CZ_gate(self, control_index: int, target_index: int) -> None: ...
    def add_SWAP_gate(self, target_index1: int, target_index2: int) -> None: ...
    def add_TOFFOLI_gate(
        self, control_index1: int, control_index2: int, target_index: int
    ) -> None: ...
    def add_UnitaryMatrix_gate(
        self,
        target_indices: Sequence[int],
        unitary_matrix: Sequence[Sequence[complex]],
    ) -> None: ...
    def add_SingleQubitUnitaryMatrix_gate(
        self,
        target_index: int,
        unitary_matrix: Sequence[Sequence[complex]],
    ) -> None: ...
    def add_TwoQubitUnitaryMatrix_gate(
        self,
        target_index1: int,
        target_index2: int,
        unitary_matrix: Sequence[Sequence[complex]],
    ) -> None: ...
    def add_Pauli_gate(
        self, target_indices: Sequence[int], pauli_ids: Sequence[int]
    ) -> None: ...
    def add_PauliRotation_gate(
        self,
        target_qubits: Sequence[int],
        pauli_id_list: Sequence[int],
        angle: float,
    ) -> None: ...
    def measure(
        self,
        qubit_indices: Union[int, Sequence[int]],
        classical_indices: Union[int, Sequence[int]],
    ) -> None: ...

class ImmutableBoundParametricQuantumCircuit(ImmutableQuantumCircuit):
    def __new__(
        cls,
        circuit: ImmutableParametricQuantumCircuit,
        parameter_map: Mapping[Parameter, float],
    ) -> "ImmutableBoundParametricQuantumCircuit": ...
    def freeze(self) -> "ImmutableBoundParametricQuantumCircuit": ...
    @property
    def unbound_param_circuit(self) -> "ImmutableParametricQuantumCircuit": ...
    @property
    def parameter_map(self) -> dict[Parameter, float]: ...
