from typing import Sequence

from .gate import ParametricQuantumGate, QuantumGate

def Identity(target_index: int) -> QuantumGate: ...
def X(target_index: int) -> QuantumGate: ...
def Y(target_index: int) -> QuantumGate: ...
def Z(target_index: int) -> QuantumGate: ...
def H(target_index: int) -> QuantumGate: ...
def S(target_index: int) -> QuantumGate: ...
def Sdag(target_index: int) -> QuantumGate: ...
def SqrtX(target_index: int) -> QuantumGate: ...
def SqrtXdag(target_index: int) -> QuantumGate: ...
def SqrtY(target_index: int) -> QuantumGate: ...
def SqrtYdag(target_index: int) -> QuantumGate: ...
def T(target_index: int) -> QuantumGate: ...
def Tdag(target_index: int) -> QuantumGate: ...
def RX(target_index: int, angle: float) -> QuantumGate: ...
def RY(target_index: int, angle: float) -> QuantumGate: ...
def RZ(target_index: int, angle: float) -> QuantumGate: ...
def U1(target_index: int, lmd: float) -> QuantumGate: ...
def U2(target_index: int, phi: float, lmd: float) -> QuantumGate: ...
def U3(target_index: int, theta: float, phi: float, lmd: float) -> QuantumGate: ...
def CNOT(control_index: int, target_index: int) -> QuantumGate: ...
def CZ(control_index: int, target_index: int) -> QuantumGate: ...
def SWAP(target_index1: int, target_index2: int) -> QuantumGate: ...
def TOFFOLI(
    control_index1: int, control_index2: int, target_index: int
) -> QuantumGate: ...
def UnitaryMatrix(
    target_indices: Sequence[int], unitary_matrix: Sequence[Sequence[complex]]
) -> QuantumGate: ...
def SingleQubitUnitaryMatrix(
    target_index: int, unitary_matrix: Sequence[Sequence[complex]]
) -> QuantumGate: ...
def TwoQubitUnitaryMatrix(
    target_index1: int, target_index2: int, unitary_matrix: Sequence[Sequence[complex]]
) -> QuantumGate: ...
def Pauli(target_indices: Sequence[int], pauli_ids: Sequence[int]) -> QuantumGate: ...
def PauliRotation(
    target_indices: Sequence[int], pauli_ids: Sequence[int], angle: float
) -> QuantumGate: ...
def Measurement(
    target_indices: Sequence[int], classical_indices: Sequence[int]
) -> QuantumGate: ...
def ParametricRX(target_index: int) -> ParametricQuantumGate: ...
def ParametricRY(target_index: int) -> ParametricQuantumGate: ...
def ParametricRZ(target_index: int) -> ParametricQuantumGate: ...
def ParametricPauliRotation(
    target_indices: Sequence[int], pauli_ids: Sequence[int]
) -> ParametricQuantumGate: ...
