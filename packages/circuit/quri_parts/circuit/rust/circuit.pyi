from typing import Optional, Sequence, Union

from .gate import QuantumGate

GateSequence = Union[ImmutableQuantumCircuit, Sequence[QuantumGate]]

class ImmutableQuantumCircuit:
    def __init__(self, circuit: "ImmutableQuantumCircuit") -> None: ...
    def __eq__(self, other: object) -> bool: ...
    @property
    def qubit_count(self) -> int: ...
    @property
    def cbit_count(self) -> int: ...
    @property
    def gates(self) -> Sequence[QuantumGate]: ...
    @property
    def depth(self) -> int: ...
    def combine(self, gates: GateSequence) -> "QuantumCircuit": ...
    def __add__(self, gates: GateSequence) -> "QuantumCircuit": ...
    def freeze(self) -> "ImmutableQuantumCircuit": ...
    def get_mutable_copy(self) -> "QuantumCircuit": ...

class QuantumCircuit(ImmutableQuantumCircuit):
    def __init__(
        self, qubit_count: int, cbit_count: int = 0, gates: Sequence[QuantumGate] = []
    ) -> None: ...
    def add_gate(self, gate: QuantumGate, gate_index: Optional[int] = None) -> None: ...
    def extend(self, gates: GateSequence) -> None: ...
    def __iadd__(self, gates: GateSequence) -> "QuantumCircuit": ...
    def add_X_gate(self, qubit_index: int) -> None: ...
