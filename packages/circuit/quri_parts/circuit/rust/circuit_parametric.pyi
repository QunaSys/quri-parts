from typing import Optional, Sequence, Tuple, Union

from quri_parts.circuit.circuit_parametric import ImmutableBoundParametricQuantumCircuit
from quri_parts.circuit.parameter_mapping import LinearParameterMapping

from .circuit import GateSequence, QuantumCircuit
from .gate import ParametricQuantumGate, QuantumGate
from .parameter import Parameter

class ImmutableParametricQuantumCircuit:
    def __init__(self, circuit: "ImmutableParametricQuantumCircuit") -> None: ...
    def __eq__(self, other: object) -> bool: ...
    @property
    def qubit_count(self) -> int: ...
    @property
    def cbit_count(self) -> int: ...
    @property
    def gates(self) -> Sequence[QuantumGate]: ...
    @property
    def gates_and_params(
        self,
    ) -> Sequence[
        Union[Tuple[QuantumGate, None], Tuple[ParametricQuantumGate, Parameter]]
    ]: ...
    @property
    def has_trivial_parameter_mapping(self) -> bool: ...
    @property
    def depth(self) -> int: ...
    @property
    def param_mapping(self) -> LinearParameterMapping: ...
    def primitive_circuit(self) -> "ImmutableParametricQuantumCircuit": ...
    def get_mutable_copy(self) -> "ParametricQuantumCircuit": ...
    def combine(
        self, gates: Union[GateSequence, "ImmutableParametricQuantumCircuit"]
    ) -> "ParametricQuantumCircuit": ...
    def freeze(self) -> "ImmutableParametricQuantumCircuit": ...
    def bind_parameters(
        self, params: Sequence[float]
    ) -> ImmutableBoundParametricQuantumCircuit: ...
    @property
    def _params(self) -> Sequence[Parameter]: ...
    @property
    def parameter_count(self) -> int: ...
    def __add__(
        self, gates: Union[GateSequence, "ImmutableParametricQuantumCircuit"]
    ) -> "ParametricQuantumCircuit": ...
    def __radd__(
        self, gates: Union[GateSequence, "ImmutableParametricQuantumCircuit"]
    ) -> "ParametricQuantumCircuit": ...

class ParametricQuantumCircuit(ImmutableParametricQuantumCircuit):
    def __init__(self, qubit_count: int, cbit_count: int = 0) -> None: ...
    def add_gate(self, gate: QuantumGate, gate_index: Optional[int] = None) -> None: ...
    def extend(
        self, gates: Union[GateSequence, "ImmutableParametricQuantumCircuit"]
    ) -> None: ...
    def __iadd__(
        self, gates: Union[GateSequence, "ImmutableParametricQuantumCircuit"]
    ) -> "ParametricQuantumCircuit": ...
    def add_ParametricRX_gate(self, qubit_index: int) -> None: ...
